#include <iostream>
using namespace std;

// Node class for linked list
class Node {
public:
    int row, col, value;
    Node* next;

    Node(int r, int c, int v) {
        row = r;
        col = c;
        value = v;
        next = nullptr;
    }
};

class SparseMatrixLinkedList {
private:
    Node* head;

public:
    SparseMatrixLinkedList() {
        head = nullptr;
    }

    void addElement(int row, int col, int value) {
        if (value != 0) {
            Node* newNode = new Node(row, col, value);
            if (!head) {
                head = newNode;
            } else {
                Node* temp = head;
                while (temp->next) {
                    temp = temp->next;
                }
                temp->next = newNode;
            }
        }
    }

    void display() {
        cout << "Row\tCol\tValue\n";
        Node* temp = head;
        while (temp) {
            cout << temp->row << "\t" << temp->col << "\t" << temp->value << "\n";
            temp = temp->next;
        }
    }
};

int main() {
    SparseMatrixLinkedList matrix;
    matrix.addElement(0, 1, 3);
    matrix.addElement(1, 2, 5);
    matrix.addElement(2, 3, 7);

    cout << "Sparse Matrix Representation (Linked List):\n";
    matrix.display();
    return 0;
}
